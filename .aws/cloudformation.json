{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches an nginx container for a SPA",

  "Parameters" : {

    "ServiceName" : {
      "Type" : "String"
    },

    "ServicePort" : {
      "Type" : "String"
    },

    "ServiceImage" : {
      "Type" : "String"
    },

    "ServiceVersion" : {
      "Type" : "String"
    },

    "SubDomain" : {
      "Type" : "String"
    },

    "UpstreamService" : {
      "Type" : "String"
    },

    "PrerenderToken" : {
      "Type" : "String"
    },

    "AcmCertificateArn" : {
      "Type" : "String"
    },

    "CloudfrontHostedZoneId" : {
      "Type" : "String",
      "Default" : "Z2FDTNDATAQYW2"
    },

    "CloudfrontPriceClass" : {
      "Type" : "String",
      "Default" : "PRICE_ALL"
    }

  },

  "Conditions" : {

    "UseSubDomain" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "SubDomain" }, "" ] }] }

  },

  "Resources" : {

    "LoggingGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": "5"
      }
    },

    "ApplicationCloudfrontDistribution" : {
      "Type" : "AWS::CloudFront::Distribution",
      "Properties" : {
        "DistributionConfig" : {
          "PriceClass" : { "Ref" : "CloudfrontPriceClass" },
          "Origins" : [ {
            "DomainName" : { "Fn::GetAtt" : ["ApplicationElasticLoadBalancer", "CanonicalHostedZoneName"] },
            "Id" : "ApplicationOrigin",
            "CustomOriginConfig" : {
              "HTTPPort" : "80",
              "HTTPSPort" : "443",
              "OriginProtocolPolicy" : "http-only"
            }
          }],
          "DefaultCacheBehavior" : {
            "AllowedMethods" : ["HEAD", "GET"],
            "TargetOriginId" : "ApplicationOrigin",
            "ViewerProtocolPolicy" : "redirect-to-https",
            "ForwardedValues" : {
              "QueryString" : "true"
            }
          },
          "Aliases" : { "Fn::If" : [
            "UseSubDomain",
            [
              { "Fn::Join" : ["", [{ "Ref" : "SubDomain" }, ".", { "Fn::ImportValue" : "EnvironmentHostedZone" }]] },
              { "Fn::Join" : ["", ["www.", { "Ref" : "SubDomain" }, ".", { "Fn::ImportValue" : "EnvironmentHostedZone" }]] }
            ],
            [
              { "Fn::ImportValue" : "EnvironmentHostedZone" },
              { "Fn::Join" : ["", ["www.", { "Fn::ImportValue" : "EnvironmentHostedZone" }]] }
            ]
          ]},
          "Enabled" : "true",
          "ViewerCertificate" : {
            "SslSupportMethod" : "sni-only",
            "AcmCertificateArn" : { "Ref" : "AcmCertificateArn" }
          }
        }
      }
    },

    "ApplicationServiceDefinition" : {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name" : { "Fn::Join" : ["_", ["nginx", { "Ref" : "ServiceName" }]] },
            "Image" : { "Fn::Join" : ["", [{ "Ref" : "ServiceImage" }, ":", { "Ref" : "ServiceVersion" }]] },
            "Essential": "true",
            "Memory" : "128",
            "Cpu" : "128",
            "LogConfiguration" : {
              "LogDriver" : "awslogs",
              "Options" : {
                "awslogs-group": { "Ref" : "LoggingGroup" },
                "awslogs-region": { "Ref" : "AWS::Region" }
              }
            },
            "Environment" : [
              {
                "Name" : "LISTEN_ON",
                "Value" : { "Ref" : "ServicePort" }
              },
              {
                "Name" : "SERVER_NAME",
                "Value" : { "Fn::If" : [
                  "UseSubDomain",
                  { "Fn::Join" : ["", [{ "Ref" : "SubDomain" }, ".", { "Fn::ImportValue" : "EnvironmentHostedZone" }]] },
                  { "Fn::ImportValue" : "EnvironmentHostedZone" }
                ]}
              },
              {
                "Name" : "PRERENDER_TOKEN",
                "Value" : { "Ref" : "PrerenderToken" }
              },
              {
                "Name" : "UPSTREAM_SERVICE",
                "Value" : { "Ref" : "UpstreamService" }
              }
            ],
            "PortMappings" : [
              {
                "ContainerPort" : { "Ref" : "ServicePort" },
                "HostPort" : { "Ref" : "ServicePort" }
              }
            ]
          }
        ]
      }
    },

    "ApplicationService": {
      "Type": "AWS::ECS::Service",
      "Properties" : {
        "Cluster": { "Fn::ImportValue" : "ECSCluster" },
        "DesiredCount": "3",
        "TaskDefinition" : { "Ref":"ApplicationServiceDefinition" },
        "Role" : { "Fn::ImportValue" : "ECSSharedServiceRoleArn" },
        "LoadBalancers" : [
          {
            "LoadBalancerName" : { "Ref" : "ApplicationElasticLoadBalancer" },
            "ContainerName" : { "Fn::Join" : ["_", ["Application", { "Ref" : "ServiceName" }]] },
            "ContainerPort" : { "Ref" : "ServicePort" }
          }
        ]
      }
    },

    "ApplicationServiceScalingRole" : {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "Path": "/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "application-autoscaling.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [{
          "PolicyName": "ECSApplicationAutoScale",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "cloudwatch:DescribeAlarms",
                "ecs:DescribeServices",
                "ecs:UpdateService"
              ],
              "Resource": ["*"]
            }]
          }
        }]
      }
    },

    "ApplicationServiceScalableTarget" : {
      "Type" : "AWS::ApplicationAutoScaling::ScalableTarget",
      "Properties" : {
        "MaxCapacity" : 40,
        "MinCapacity" : 10,
        "ResourceId" : { "Fn::Join" : ["/", [
          "service",
          { "Fn::ImportValue" : "ECSCluster" },
          { "Fn::GetAtt" : ["ApplicationService", "Name" ] }
        ]]},
        "RoleARN" : { "Fn::GetAtt" : ["ApplicationServiceScalingRole", "Arn"] },
        "ScalableDimension" : "ecs:service:DesiredCount",
        "ServiceNamespace" : "ecs"
      }
    },

    "ApplicationServiceScalingPolicy" : {
      "Type" : "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties" : {
        "PolicyName" : "ApplicationServiceStepScalingPolicy",
        "PolicyType" : "StepScaling",
        "ScalingTargetId" : { "Ref": "ApplicationServiceScalableTarget" },
        "StepScalingPolicyConfiguration" : {
          "AdjustmentType" : "PercentChangeInCapacity",
          "Cooldown" : 40,
          "MetricAggregationType" : "Average",
          "StepAdjustments" : [{
            "MetricIntervalLowerBound" : 0,
            "ScalingAdjustment" : 6
          }]
        }
      }
    },

    "ApplicationElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "ApplicationLoadBalancerSecurityGroup" } ],
        "Subnets" : [
          { "Fn::ImportValue" : "NetworkPublicSubnetA" },
          { "Fn::ImportValue" : "NetworkPublicSubnetB" },
          { "Fn::ImportValue" : "NetworkPublicSubnetC" }
        ],
        "ConnectionSettings" : { "IdleTimeout" : "1800" },
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : { "Ref" : "ServicePort" },
            "Protocol" : "HTTP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : ["", ["HTTP:", { "Ref" : "ServicePort" }, "/"]] },
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "20",
          "Timeout" : "10"
        }
      }
    },

    "RequestCount250": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties" : {
        "MetricName": "RequestCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "350",
        "AlarmActions": [{ "Ref" : "ApplicationServiceScalingPolicy" }],
        "OKActions" : [{ "Ref" : "ApplicationServiceScalingPolicy" }],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ApplicationElasticLoadBalancer" }
          }
        ]
      }
    },

    "RequestCount500": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties" : {
        "MetricName": "RequestCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "3",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "500",
        "AlarmActions": [{ "Ref" : "ApplicationServiceScalingPolicy" }],
        "OKActions" : [{ "Ref" : "ApplicationServiceScalingPolicy" }],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ApplicationElasticLoadBalancer" }
          }
        ]
      }
    },

    "RequestCount800": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties" : {
        "MetricName": "RequestCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "4",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "800",
        "AlarmActions": [{ "Ref" : "ApplicationServiceScalingPolicy" }],
        "OKActions" : [{ "Ref" : "ApplicationServiceScalingPolicy" }],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ApplicationElasticLoadBalancer" }
          }
        ]
      }
    },

    "ApplicationLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable TCP access on a public port",
        "VpcId" : { "Fn::ImportValue" : "NetworkVPCId" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

    "ApplicationLoadBalancerIngressIntoECSServer": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": { "Ref" : "ServicePort" },
        "ToPort": { "Ref" : "ServicePort" },
        "SourceSecurityGroupId": { "Ref" : "ApplicationLoadBalancerSecurityGroup" },
        "GroupId": { "Fn::ImportValue" : "ECSSecurityGroup" }
      }
    },

    "ApplicationServiceDNSZone" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" :  ["", [{ "Fn::ImportValue" : "EnvironmentHostedZone" }, "."]] },
        "RecordSets" : [{
          "Name" : { "Fn::If" : [
            "UseSubDomain",
            { "Fn::Join" : ["", [{ "Ref" : "SubDomain" }, ".", { "Fn::ImportValue" : "EnvironmentHostedZone" }, "."]] },
            { "Fn::Join" : ["", [{ "Fn::ImportValue" : "EnvironmentHostedZone" }, "."]] }
          ]},
          "Type" : "A",
          "AliasTarget" : {
            "HostedZoneId" : { "Ref" : "CloudfrontHostedZoneId" },
            "DNSName" : { "Fn::GetAtt" : ["ApplicationCloudfrontDistribution", "DomainName"] }
          }
        }]
      }
    },

    "ApplicationServiceWWWDNSZone" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" :  ["", [{ "Fn::ImportValue" : "EnvironmentHostedZone" }, "."]] },
        "RecordSets" : [{
          "Name" : { "Fn::If" : [
            "UseSubDomain",
            { "Fn::Join" : ["", ["www.", { "Ref" : "SubDomain" }, ".", { "Fn::ImportValue" : "EnvironmentHostedZone" }, "."]] },
            { "Fn::Join" : ["", ["www.", { "Fn::ImportValue" : "EnvironmentHostedZone" }, "."]] }
          ]},
          "Type" : "A",
          "AliasTarget" : {
            "HostedZoneId" : { "Ref" : "CloudfrontHostedZoneId" },
            "DNSName" : { "Fn::GetAtt" : ["ApplicationCloudfrontDistribution", "DomainName"] }
          }
        }]
      }
    }

  },

  "Outputs" : {

    "URL" : {
      "Description" : "Public URL",
      "Value" : { "Fn::If" : [
        "UseSubDomain",
        { "Fn::Join" : ["", ["http://", { "Ref" : "SubDomain" }, ".", { "Fn::ImportValue" : "EnvironmentHostedZone" }]] },
        { "Fn::Join" : ["", ["http://", { "Fn::ImportValue" : "EnvironmentHostedZone" }]] }
      ]}
    }

  }
}
